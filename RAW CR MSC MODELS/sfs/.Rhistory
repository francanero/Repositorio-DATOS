sfeats.clay.cr <- getFeatSelResult(mod.clay.cr)
sfeats.clay.cr$x
analyzeFeatSelResult(sfeats.clay.cr)
sd(datos[[14]][-45])/(sfeats.clay.cr$y)
#msc
rf_clay_msc <- bind_cols(datos[[14]], lista[[3]])
rf_clay_msc <- rf_clay_msc[-45,]
names(rf_clay_msc)[1] <- "clay"
clay.msc.task <- makeRegrTask(id = "nieves", data = rf_clay_msc, target = "clay")
res.clay.msc <- tuneParams("regr.randomForest", task = clay.msc.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.clay.msc[["opt.path"]][["env"]][["path"]][["ntree"]], res.clay.msc[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.clay.msc <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = res.clay.msc$x), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.clay.msc <- train(lrn.clay.msc, task = clay.msc.task)
sfeats.clay.msc <- getFeatSelResult(mod.clay.msc)
sfeats.clay.msc$x
analyzeFeatSelResult(sfeats.clay.msc)
sd(datos[[14]][-45])/(sfeats.clay.msc$y)
analyzeFeatSelResult(sfeats.clay.cr)
sd(datos[[14]][-45])/(sfeats.clay.cr$y)
nalyzeFeatSelResult(sfeats.clay.raw)
sd(datos[[14]][-45])/(sfeats.clay.raw$y)
analyzeFeatSelResult(sfeats.clay.raw)
sd(datos[[14]][-45])/(sfeats.clay.raw$y)
analyzeFeatSelResult(sfeats.carb.msc)
sd(datos[[7]])/(sfeats.carb.msc$y)
analyzeFeatSelResult(sfeats.carb.cr)
sd(datos[[7]])/(sfeats.carb.cr$y)
analyzeFeatSelResult(sfeats.carb.raw)
sd(datos[[7]])/(sfeats.carb.raw$y)
analyzeFeatSelResult(sfeats.mo.msc)
sd(datos[[5]])/(sfeats.mo.msc$y)
analyzeFeatSelResult(sfeats.mo.cr)
sd(datos[[5]])/(sfeats.mo.cr$y)
analyzeFeatSelResult(sfeats.mo.raw)
sd(datos[[5]])/(sfeats.mo.raw$y)
lrn.mo.raw <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = res.mo.raw$x), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.mo.raw <- train(lrn.mo.raw, task = mo.raw.task)
lrn.mo.raw <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = res.mo.raw$x), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
library(dplyr) #manipulacion datos
library(mlr)
library(randomForest)
lrn.mo.raw <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = res.mo.raw$x), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.mo.raw <- train(lrn.mo.raw, task = mo.raw.task)
save.image("D:/Doctorado/es_01/sfs/sfs_rmse.RData")
analyzeFeatSelResult(sfeats.carb.cr)
sd(datos[[7]])/(sfeats.carb.cr$y)
rf_carb_cr <- bind_cols(datos[[7]], lista[[2]])
names(rf_carb_cr)[1] <- "carb"
carb.cr.task <- makeRegrTask(id = "nieves", data = rf_carb_cr, target = "carb")
res.carb.cr <- tuneParams("regr.randomForest", task = carb.cr.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.carb.cr[["opt.path"]][["env"]][["path"]][["ntree"]], res.carb.cr[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.carb.cr <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = res.carb.cr$x), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.carb.cr <- train(lrn.carb.cr, task = carb.cr.task)
sfeats.carb.cr <- getFeatSelResult(mod.carb.cr)
sfeats.carb.cr$x
analyzeFeatSelResult(sfeats.carb.cr)
sd(datos[[7]])/(sfeats.carb.cr$y)
save.image("D:/Doctorado/es_01/sfs/sfs_rmse.RData")
analyzeFeatSelResult(sfeats.carb.msc)
rf_carb_msc <- bind_cols(datos[[7]], lista[[3]])
names(rf_carb_msc)[1] <- "carb"
carb.msc.task <- makeRegrTask(id = "nieves", data = rf_carb_msc, target = "carb")
res.carb.msc <- tuneParams("regr.randomForest", task = carb.msc.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.carb.msc[["opt.path"]][["env"]][["path"]][["ntree"]], res.carb.msc[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.carb.msc <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = res.carb.msc$x), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.carb.msc <- train(lrn.carb.msc, task = carb.msc.task)
sfeats.carb.msc <- getFeatSelResult(mod.carb.msc)
sfeats.carb.msc$x
analyzeFeatSelResult(sfeats.carb.msc)
sd(datos[[7]])/(sfeats.carb.msc$y)
analyzeFeatSelResult(sfeats.clay.raw)
sd(datos[[14]][-45])/(sfeats.clay.raw$y)
analyzeFeatSelResult(sfeats.clay.cr)
sd(datos[[14]][-45])/(sfeats.clay.cr$y)
analyzeFeatSelResult(sfeats.clay.msc)
sd(datos[[14]][-45])/(sfeats.clay.msc$y)
plot(res.clay.msc[["opt.path"]][["env"]][["path"]][["ntree"]], res.clay.msc[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
rf_clay_msc <- bind_cols(datos[[14]], lista[[3]])
rf_clay_msc <- rf_clay_msc[-45,]
names(rf_clay_msc)[1] <- "clay"
clay.msc.task <- makeRegrTask(id = "nieves", data = rf_clay_msc, target = "clay")
res.clay.msc <- tuneParams("regr.randomForest", task = clay.msc.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.clay.msc[["opt.path"]][["env"]][["path"]][["ntree"]], res.clay.msc[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.clay.msc <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = res.clay.msc$x), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.clay.msc <- train(lrn.clay.msc, task = clay.msc.task)
sfeats.clay.msc <- getFeatSelResult(mod.clay.msc)
sfeats.clay.msc$x
analyzeFeatSelResult(sfeats.clay.msc)
sd(datos[[14]][-45])/(sfeats.clay.msc$y)
rf_clay_msc <- bind_cols(datos[[14]], lista[[3]])
rf_clay_msc <- rf_clay_msc[-45,]
names(rf_clay_msc)[1] <- "clay"
clay.msc.task <- makeRegrTask(id = "nieves", data = rf_clay_msc, target = "clay")
res.clay.msc <- tuneParams("regr.randomForest", task = clay.msc.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.clay.msc[["opt.path"]][["env"]][["path"]][["ntree"]], res.clay.msc[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.clay.msc <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = res.clay.msc$x), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.clay.msc <- train(lrn.clay.msc, task = clay.msc.task)
sfeats.clay.msc <- getFeatSelResult(mod.clay.msc)
sfeats.clay.msc$x
analyzeFeatSelResult(sfeats.clay.msc)
sd(datos[[14]][-45])/(sfeats.clay.msc$y)
save.image("D:/Doctorado/es_01/sfs/sfs.Rproj.RData")
analyzeFeatSelResult(sfeats.clay.cr)
sd(datos[[14]][-45])/(sfeats.clay.cr$y)
library(dplyr) #manipulacion datos
library(mlr)
library(randomForest)
analyzeFeatSelResult(sfeats.carb.cr)
sd(datos[[7]])/(sfeats.carb.cr$y)
analyzeFeatSelResult(sfeats.carb.raw)
sd(datos[[7]])/(sfeats.carb.raw$y)
analyzeFeatSelResult(sfeats.carb.msc)
sd(datos[[7]])/(sfeats.carb.msc$y)
rf_carb_msc <- bind_cols(datos[[7]], lista[[3]])
names(rf_carb_msc)[1] <- "carb"
carb.msc.task <- makeRegrTask(id = "nieves", data = rf_carb_msc, target = "carb")
res.carb.msc <- tuneParams("regr.randomForest", task = carb.msc.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, expvar),  control = makeTuneControlGrid())
plot(res.carb.msc[["opt.path"]][["env"]][["path"]][["ntree"]], res.carb.msc[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.carb.msc <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = res.carb.msc$x), resampling = rdesc, measures = list(rmse, expvar), control = ctrl, show.info = T)
mod.carb.msc <- train(lrn.carb.msc, task = carb.msc.task)
sfeats.carb.msc <- getFeatSelResult(mod.carb.msc)
sfeats.carb.msc$x
analyzeFeatSelResult(sfeats.carb.msc)
sd(datos[[7]])/(sfeats.carb.msc$y)
View(mod.carb.cr)
View(mod.carb.msc)
mod.carb.msc[["learner.model"]][["next.model"]][["learner.model"]][["rsq"]]
View(mod.carb.mcs)
View(mod.carb.msc)
mod.carb.msc
library(dplyr) #manipulacion datos
library(mlr)
library(randomForest)
setwd("D:/Doctorado/spec_lab_r/")
datos <- read.csv2("D:/Doctorado/estadisticos_tesis/datos.csv")
raw <- read.csv2("raw.csv", sep = ",", dec = ".")
raw <- raw[3:length(raw)]
cr <- read.csv2("cr.csv", sep = ",", dec = ".")
cr <- cr[2:length(cr)]
msc <- read.csv2("msc.csv", sep = ",", dec = ".")
msc <- msc[2:length(msc)]
lista <- list(raw, cr, msc)
rm(raw)
rm(cr)
rm(msc)
coln <- seq(400, 2450, 1)
#Generales
ps.rf <- makeParamSet(makeDiscreteParam("ntree", values = c(10, 20, 30, 40, 50, 60, 70, 80, 90,
100, 200, 300, 400, 500, 600, 700, 800, 900,
1000, 2000, 3000, 4000, 5000)))
rdesc <- makeResampleDesc("CV", iters = 10)
ctrl <- makeFeatSelControlSequential(method = "sfs", alpha = 0.001)
#Machine Learning
#Materia orgÃ¡nica
#Raw
rf_mo_raw <- bind_cols(datos[[5]], lista[[1]])
names(rf_mo_raw)[1] <- "mo"
mo.raw.task <- makeRegrTask(id = "nieves", data = rf_mo_raw, target = "mo")
#res.mo.raw <- tuneParams("regr.randomForest", task = mo.raw.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
#plot(res.mo.raw[["opt.path"]][["env"]][["path"]][["ntree"]], res.mo.raw[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
#plot(res.mo.raw[["opt.path"]][["env"]][["path"]][["ntree"]], res.mo.raw[["opt.path"]][["env"]][["path"]][["rsq.test.mean"]], type = "l")
lrn.mo.raw <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = 1300), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
lrn.mo.raw <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(1300), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
lrn.mo.raw <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 1300), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
lrn.mo.raw <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(1300), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
lrn.mo.raw <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(1300), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T))
lrn.mo.raw <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(1300)),
resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
lrn.mo.raw <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 1300)),
resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.mo.raw <- train(lrn.mo.raw, task = mo.raw.task)
sfeats.mo.raw <- getFeatSelResult(mod.mo.raw)
sfeats.mo.raw$x
analyzeFeatSelResult(sfeats.mo.raw)
sd(datos[[5]])/(sfeats.mo.raw$y)
rf_mo_cr <- bind_cols(datos[[5]], lista[[2]])
names(rf_mo_cr)[1] <- "mo"
mo.cr.task <- makeRegrTask(id = "nieves", data = rf_mo_cr, target = "mo")
res.mo.cr <- tuneParams("regr.randomForest", task = mo.cr.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.mo.cr[["opt.path"]][["env"]][["path"]][["ntree"]], res.mo.cr[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.mo.cr <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 300)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.mo.cr <- train(lrn.mo.cr, task = mo.cr.task)
sfeats.mo.cr <- getFeatSelResult(mod.mo.cr)
sfeats.mo.cr$y
analyzeFeatSelResult(sfeats.mo.cr)
sd(datos[[5]])/(sfeats.mo.cr$y)
#msc
rf_mo_msc <- bind_cols(datos[[5]], lista[[3]])
names(rf_mo_msc)[1] <- "mo"
mo.msc.task <- makeRegrTask(id = "nieves", data = rf_mo_msc, target = "mo")
res.mo.msc <- tuneParams("regr.randomForest", task = mo.msc.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.mo.msc[["opt.path"]][["env"]][["path"]][["ntree"]], res.mo.msc[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.mo.msc <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 100)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.mo.msc <- train(lrn.mo.msc, task = mo.msc.task)
sfeats.mo.msc <- getFeatSelResult(mod.mo.msc)
sfeats.mo.msc$x
analyzeFeatSelResult(sfeats.mo.msc)
sd(datos[[5]])/(sfeats.mo.msc$y)
#Carbonatos
#Raw
rf_carb_raw <- bind_cols(datos[[7]], lista[[1]])
names(rf_carb_raw)[1] <- "carb"
carb.raw.task <- makeRegrTask(id = "nieves", data = rf_carb_raw, target = "carb")
res.carb.raw <- tuneParams("regr.randomForest", task = carb.raw.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.carb.raw[["opt.path"]][["env"]][["path"]][["ntree"]], res.carb.raw[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.carb.raw <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 100)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.carb.raw <- train(lrn.carb.raw, task = carb.raw.task)
sfeats.carb.raw <- getFeatSelResult(mod.carb.raw)
sfeats.carb.raw$x
analyzeFeatSelResult(sfeats.carb.raw)
sd(datos[[7]])/(sfeats.carb.raw$y)
#cr
rf_carb_cr <- bind_cols(datos[[7]], lista[[2]])
names(rf_carb_cr)[1] <- "carb"
carb.cr.task <- makeRegrTask(id = "nieves", data = rf_carb_cr, target = "carb")
res.carb.cr <- tuneParams("regr.randomForest", task = carb.cr.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.carb.cr[["opt.path"]][["env"]][["path"]][["ntree"]], res.carb.cr[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.carb.cr <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 200)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.carb.cr <- train(lrn.carb.cr, task = carb.cr.task)
sfeats.carb.cr <- getFeatSelResult(mod.carb.cr)
sfeats.carb.cr$x
analyzeFeatSelResult(sfeats.carb.cr)
sd(datos[[7]])/(sfeats.carb.cr$y)
#msc
rf_carb_msc <- bind_cols(datos[[7]], lista[[3]])
names(rf_carb_msc)[1] <- "carb"
carb.msc.task <- makeRegrTask(id = "nieves", data = rf_carb_msc, target = "carb")
res.carb.msc <- tuneParams("regr.randomForest", task = carb.msc.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.carb.msc[["opt.path"]][["env"]][["path"]][["ntree"]], res.carb.msc[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.carb.msc <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 400)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.carb.msc <- train(lrn.carb.msc, task = carb.msc.task)
sfeats.carb.msc <- getFeatSelResult(mod.carb.msc)
sfeats.carb.msc$x
analyzeFeatSelResult(sfeats.carb.msc)
sd(datos[[7]])/(sfeats.carb.msc$y)
#Arcilla
#Raw
rf_clay_raw <- bind_cols(datos[[14]], lista[[1]])
rf_clay_raw <- rf_clay_raw[-45,]
names(rf_clay_raw)[1] <- "clay"
clay.raw.task <- makeRegrTask(id = "nieves", data = rf_clay_raw, target = "clay")
res.clay.raw <- tuneParams("regr.randomForest", task = clay.raw.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.clay.raw[["opt.path"]][["env"]][["path"]][["ntree"]], res.clay.raw[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.clay.raw <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 600)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.clay.raw <- train(lrn.clay.raw, task = clay.raw.task)
sfeats.clay.raw <- getFeatSelResult(mod.clay.raw)
sfeats.clay.raw$x
analyzeFeatSelResult(sfeats.clay.raw)
sd(datos[[14]][-45])/(sfeats.clay.raw$y)
#cr
rf_clay_cr <- bind_cols(datos[[14]], lista[[2]])
rf_clay_cr <- rf_clay_cr[-45,]
names(rf_clay_cr)[1] <- "clay"
clay.cr.task <- makeRegrTask(id = "nieves", data = rf_clay_cr, target = "clay")
res.clay.cr <- tuneParams("regr.randomForest", task = clay.cr.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.clay.cr[["opt.path"]][["env"]][["path"]][["ntree"]], res.clay.cr[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.clay.cr <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 1300)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.clay.cr <- train(lrn.clay.cr, task = clay.cr.task)
sfeats.clay.cr <- getFeatSelResult(mod.clay.cr)
sfeats.clay.cr$x
analyzeFeatSelResult(sfeats.clay.cr)
sd(datos[[14]][-45])/(sfeats.clay.cr$y)
#msc
rf_clay_msc <- bind_cols(datos[[14]], lista[[3]])
rf_clay_msc <- rf_clay_msc[-45,]
names(rf_clay_msc)[1] <- "clay"
clay.msc.task <- makeRegrTask(id = "nieves", data = rf_clay_msc, target = "clay")
res.clay.msc <- tuneParams("regr.randomForest", task = clay.msc.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.clay.msc[["opt.path"]][["env"]][["path"]][["ntree"]], res.clay.msc[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.clay.msc <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 1400)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.clay.msc <- train(lrn.clay.msc, task = clay.msc.task)
sfeats.clay.msc <- getFeatSelResult(mod.clay.msc)
sfeats.clay.msc$x
analyzeFeatSelResult(sfeats.clay.msc)
sd(datos[[14]][-45])/(sfeats.clay.msc$y)
rf_mo_cr <- bind_cols(datos[[5]], lista[[2]])
names(rf_mo_cr)[1] <- "mo"
mo.cr.task <- makeRegrTask(id = "nieves", data = rf_mo_cr, target = "mo")
lrn.mo.cr <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 300)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.mo.cr <- train(lrn.mo.cr, task = mo.cr.task)
sfeats.mo.cr <- getFeatSelResult(mod.mo.cr)
sfeats.mo.cr$y
analyzeFeatSelResult(sfeats.mo.cr)
sd(datos[[5]])/(sfeats.mo.cr$y)
#msc
rf_mo_msc <- bind_cols(datos[[5]], lista[[3]])
names(rf_mo_msc)[1] <- "mo"
mo.msc.task <- makeRegrTask(id = "nieves", data = rf_mo_msc, target = "mo")
#res.mo.msc <- tuneParams("regr.randomForest", task = mo.msc.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
#plot(res.mo.msc[["opt.path"]][["env"]][["path"]][["ntree"]], res.mo.msc[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.mo.msc <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 100)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.mo.msc <- train(lrn.mo.msc, task = mo.msc.task)
sfeats.mo.msc <- getFeatSelResult(mod.mo.msc)
sfeats.mo.msc$x
analyzeFeatSelResult(sfeats.mo.msc)
sd(datos[[5]])/(sfeats.mo.msc$y)
#Carbonatos
#Raw
rf_carb_raw <- bind_cols(datos[[7]], lista[[1]])
names(rf_carb_raw)[1] <- "carb"
carb.raw.task <- makeRegrTask(id = "nieves", data = rf_carb_raw, target = "carb")
#res.carb.raw <- tuneParams("regr.randomForest", task = carb.raw.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
#plot(res.carb.raw[["opt.path"]][["env"]][["path"]][["ntree"]], res.carb.raw[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.carb.raw <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 100)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.carb.raw <- train(lrn.carb.raw, task = carb.raw.task)
sfeats.carb.raw <- getFeatSelResult(mod.carb.raw)
sfeats.carb.raw$x
analyzeFeatSelResult(sfeats.carb.raw)
sd(datos[[7]])/(sfeats.carb.raw$y)
#cr
rf_carb_cr <- bind_cols(datos[[7]], lista[[2]])
names(rf_carb_cr)[1] <- "carb"
carb.cr.task <- makeRegrTask(id = "nieves", data = rf_carb_cr, target = "carb")
#res.carb.cr <- tuneParams("regr.randomForest", task = carb.cr.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.carb.cr[["opt.path"]][["env"]][["path"]][["ntree"]], res.carb.cr[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.carb.cr <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 200)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.carb.cr <- train(lrn.carb.cr, task = carb.cr.task)
sfeats.carb.cr <- getFeatSelResult(mod.carb.cr)
sfeats.carb.cr$x
analyzeFeatSelResult(sfeats.carb.cr)
sd(datos[[7]])/(sfeats.carb.cr$y)
#msc
rf_carb_msc <- bind_cols(datos[[7]], lista[[3]])
names(rf_carb_msc)[1] <- "carb"
carb.msc.task <- makeRegrTask(id = "nieves", data = rf_carb_msc, target = "carb")
#res.carb.msc <- tuneParams("regr.randomForest", task = carb.msc.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.carb.msc[["opt.path"]][["env"]][["path"]][["ntree"]], res.carb.msc[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.carb.msc <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 400)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.carb.msc <- train(lrn.carb.msc, task = carb.msc.task)
sfeats.carb.msc <- getFeatSelResult(mod.carb.msc)
sfeats.carb.msc$x
analyzeFeatSelResult(sfeats.carb.msc)
sd(datos[[7]])/(sfeats.carb.msc$y)
#Arcilla
#Raw
rf_clay_raw <- bind_cols(datos[[14]], lista[[1]])
rf_clay_raw <- rf_clay_raw[-45,]
names(rf_clay_raw)[1] <- "clay"
clay.raw.task <- makeRegrTask(id = "nieves", data = rf_clay_raw, target = "clay")
#res.clay.raw <- tuneParams("regr.randomForest", task = clay.raw.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.clay.raw[["opt.path"]][["env"]][["path"]][["ntree"]], res.clay.raw[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.clay.raw <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 600)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.clay.raw <- train(lrn.clay.raw, task = clay.raw.task)
sfeats.clay.raw <- getFeatSelResult(mod.clay.raw)
sfeats.clay.raw$x
analyzeFeatSelResult(sfeats.clay.raw)
sd(datos[[14]][-45])/(sfeats.clay.raw$y)
#cr
rf_clay_cr <- bind_cols(datos[[14]], lista[[2]])
rf_clay_cr <- rf_clay_cr[-45,]
names(rf_clay_cr)[1] <- "clay"
clay.cr.task <- makeRegrTask(id = "nieves", data = rf_clay_cr, target = "clay")
#res.clay.cr <- tuneParams("regr.randomForest", task = clay.cr.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.clay.cr[["opt.path"]][["env"]][["path"]][["ntree"]], res.clay.cr[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.clay.cr <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 1300)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.clay.cr <- train(lrn.clay.cr, task = clay.cr.task)
sfeats.clay.cr <- getFeatSelResult(mod.clay.cr)
sfeats.clay.cr$x
analyzeFeatSelResult(sfeats.clay.cr)
sd(datos[[14]][-45])/(sfeats.clay.cr$y)
#msc
rf_clay_msc <- bind_cols(datos[[14]], lista[[3]])
rf_clay_msc <- rf_clay_msc[-45,]
names(rf_clay_msc)[1] <- "clay"
clay.msc.task <- makeRegrTask(id = "nieves", data = rf_clay_msc, target = "clay")
#res.clay.msc <- tuneParams("regr.randomForest", task = clay.msc.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
plot(res.clay.msc[["opt.path"]][["env"]][["path"]][["ntree"]], res.clay.msc[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.clay.msc <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 1400)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.clay.msc <- train(lrn.clay.msc, task = clay.msc.task)
sfeats.clay.msc <- getFeatSelResult(mod.clay.msc)
sfeats.clay.msc$x
analyzeFeatSelResult(sfeats.clay.msc)
sd(datos[[14]][-45])/(sfeats.clay.msc$y)
save.image("D:/Doctorado/es_01/sfs/sfs_ok.RData")
analyzeFeatSelResult(sfeats.mo.msc)
sd(datos[[5]])/(sfeats.mo.msc$y)
analyzeFeatSelResult(sfeats.mo.cr)
sd(datos[[5]])/(sfeats.mo.cr$y)
analyzeFeatSelResult(sfeats.carb.raw)
sd(datos[[7]])/(sfeats.carb.raw$y)
analyzeFeatSelResult(sfeats.carb.cr)
sd(datos[[7]])/(sfeats.carb.cr$y)
analyzeFeatSelResult(sfeats.carb.msc)
sd(datos[[7]])/(sfeats.carb.msc$y)
IQR(datos[[7]])/(sfeats.carb.cr$y)
IQR(datos[[14]][-45])/(sfeats.clay.msc$y)
sd(datos[[14]][-45])/(sfeats.clay.msc$y)
analyzeFeatSelResult(sfeats.clay.raw)
sd(datos[[14]][-45])/(sfeats.clay.raw$y)
analyzeFeatSelResult(sfeats.clay.cr)
sd(datos[[14]][-45])/(sfeats.clay.cr$y)
analyzeFeatSelResult(sfeats.clay.msc)
sd(datos[[14]][-45])/(sfeats.clay.msc$y)
analyzeFeatSelResult(sfeats.mo.raw)
sd(datos[[5]])/(sfeats.mo.raw$y)
library(dplyr) #manipulacion datos
library(mlr)
library(randomForest)
analyzeFeatSelResult(sfeats.mo.raw)
sd(datos[[5]])/(sfeats.mo.raw$y)
analyzeFeatSelResult(sfeats.mo.cr)
sd(datos[[5]])/(sfeats.mo.cr$y)
analyzeFeatSelResult(sfeats.mo.msc)
sd(datos[[5]])/(sfeats.mo.msc$y)
analyzeFeatSelResult(sfeats.carb.raw)
sd(datos[[7]])/(sfeats.carb.raw$y)
analyzeFeatSelResult(sfeats.carb.cr)
sd(datos[[7]])/(sfeats.carb.cr$y)
analyzeFeatSelResult(sfeats.carb.msc)
sd(datos[[7]])/(sfeats.carb.msc$y)
analyzeFeatSelResult(sfeats.clay.raw)
sd(datos[[14]][-45])/(sfeats.clay.raw$y)
analyzeFeatSelResult(sfeats.clay.cr)
sd(datos[[14]][-45])/(sfeats.clay.cr$y)
analyzeFeatSelResult(sfeats.clay.msc)
sd(datos[[14]][-45])/(sfeats.clay.msc$y)
rf_carb_raw <- bind_cols(datos[[7]], lista[[1]])
names(rf_carb_raw)[1] <- "carb"
carb.raw.task <- makeRegrTask(id = "nieves", data = rf_carb_raw, target = "carb")
#res.carb.raw <- tuneParams("regr.randomForest", task = carb.raw.task, resampling = rdesc, par.set = ps.rf, measures = list(rmse, rsq),  control = makeTuneControlGrid())
#plot(res.carb.raw[["opt.path"]][["env"]][["path"]][["ntree"]], res.carb.raw[["opt.path"]][["env"]][["path"]][["rmse.test.rmse"]], type = "l")
lrn.carb.raw <- makeFeatSelWrapper(setHyperPars(makeLearner("regr.randomForest"), par.vals = list(ntree = 100)), resampling = rdesc, measures = list(rmse, rsq), control = ctrl, show.info = T)
mod.carb.raw <- train(lrn.carb.raw, task = carb.raw.task)
sfeats.carb.raw <- getFeatSelResult(mod.carb.raw)
sfeats.carb.raw$x
analyzeFeatSelResult(sfeats.carb.raw)
sd(datos[[7]])/(sfeats.carb.raw$y)
save.image("D:/Doctorado/es_01/sfs/sfs.RData")
View(mo.cr.task)
View(mod.mo.cr)
mod.mo.cr[["learner.model"]][["next.model"]][["learner.model"]][["predicted"]]
g.mo.raw <- data.frame(datos[[5]], mod.mo.raw[["learner.model"]][["next.model"]][["learner.model"]][["predicted"]])
View(g.mo.raw)
names(g.mo.raw) <- c("obs", "pred")
setwd(!"D:/Doctorado/proy_origin/")
setwd("D:/Doctorado/proy_origin/")
g.mo.raw <- data.frame(datos[[5]], mod.mo.raw[["learner.model"]][["next.model"]][["learner.model"]][["predicted"]])
names(g.mo.raw) <- c("obs", "pred")
rm(g.mo.raw)
setwd("D:/Doctorado/proy_origin/")
g.mo <- data.frame(datos[[5]], mod.mo.cr[["learner.model"]][["next.model"]][["learner.model"]][["predicted"]])
names(g.mo) <- c("obs", "pred")
write.csv2(g.mo, file = "mo.csv")
mod.clay.msc[["learner.model"]][["next.model"]][["learner.model"]][["predicted"]]
datos[[14]][-45,]
datos[[14]]
datos[[14]][-45]
g.carb <- data.frame(datos[[7]], mod.carb.cr[["learner.model"]][["next.model"]][["learner.model"]][["predicted"]])
names(g.carb) <- c("obs", "pred")
write.csv2(g.carb, file = "carb.csv")
g.clay <- data.frame(datos[[14]][-45], mod.clay.msc[["learner.model"]][["next.model"]][["learner.model"]][["predicted"]])
names(g.clay) <- c("obs", "pred")
write.csv2(g.clay, file = "clay.csv")
setwd("D:/Doctorado/proy_origin/")
g.clay <- data.frame(datos[[14]][-45], mod.clay.msc[["learner.model"]][["next.model"]][["learner.model"]][["predicted"]])
names(g.clay) <- c("obs", "pred")
write.csv2(g.clay, file = "clay.csv")
g.clay <- data.frame(datos[[14]][-45], mod.clay.cr[["learner.model"]][["next.model"]][["learner.model"]][["predicted"]])
names(g.clay) <- c("obs", "pred")
write.csv2(g.clay, file = "clay.csv")
g.carb <- data.frame(datos[[7]], mod.carb.cr[["learner.model"]][["next.model"]][["learner.model"]][["predicted"]])
names(g.carb) <- c("obs", "pred")
write.csv2(g.carb, file = "sfs_carb.csv")
setwd("D:/Doctorado/ss_scaterplot/")
g.carb <- data.frame(datos[[7]], mod.carb.cr[["learner.model"]][["next.model"]][["learner.model"]][["predicted"]])
names(g.carb) <- c("obs", "pred")
write.csv2(g.carb, file = "sfs_carb.csv")
View(mod.carb.cr)
View(mod.carb.msc)
View(mod.carb.raw)
View(mod.clay.cr)
View(mod.clay.msc)
View(mod.clay.raw)
View(mod.mo.cr)
View(mod.mo.msc)
View(mod.mo.raw)
library(mlr)
analyzeFeatSelResult(sfeats.mo.cr)
sd(datos[[5]])/(sfeats.mo.cr$y)
save.image("J:/paper_espectroscopia_suelos/datos/individual/sfs.RData")
sfeats.mo.cr$y
analyzeFeatSelResult(sfeats.mo.cr)
library(dplyr) #manipulacion datos
library(mlr)
library(randomForest)
analyzeFeatSelResult(sfeats.mo.msc)
cat("Hola!")
message("Hola!")
library(dplyr) #manipulacion datos
library(mlr)
library(randomForest)
sfeats.clay.cr
sfeats.clay.cr %>% analyzeFeatSelResult()
library(dplyr) #manipulacion datos
library(mlr)
library(randomForest)
sfeats.clay.cr
View(sfeats.clay.cr)
sfeats.clay.cr[["x"]]
install.packages(c("devRate", "pollen", "reshape", "riem"))
library(pmml)
pmml(mod.mo.cr)
library(dplyr) #manipulacion datos
library(mlr)
library(randomForest)
mod.mo.cr %>% class()
pmml.randomForest(mod.mo.cr)
install.packages("r2pmml")
r2pmml(mod.mo.cr, 'mod.mo.cr.pmml')
library("r2pmml")
r2pmml(mod.mo.cr, 'mod.mo.cr.pmml')
q()
